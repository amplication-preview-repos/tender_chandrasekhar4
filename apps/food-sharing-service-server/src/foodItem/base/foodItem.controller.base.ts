/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FoodItemService } from "../foodItem.service";
import { FoodItemCreateInput } from "./FoodItemCreateInput";
import { FoodItem } from "./FoodItem";
import { Request } from "../../request/base/Request";
import { FoodItemFindManyArgs } from "./FoodItemFindManyArgs";
import { FoodItemWhereUniqueInput } from "./FoodItemWhereUniqueInput";
import { FoodItemUpdateInput } from "./FoodItemUpdateInput";
import { RequestFindManyArgs } from "../../request/base/RequestFindManyArgs";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";

export class FoodItemControllerBase {
  constructor(protected readonly service: FoodItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FoodItem })
  async createFoodItem(
    @common.Body() data: FoodItemCreateInput
  ): Promise<FoodItem> {
    return await this.service.createFoodItem({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        expiryDate: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FoodItem] })
  @ApiNestedQuery(FoodItemFindManyArgs)
  async foodItems(@common.Req() request: Request): Promise<FoodItem[]> {
    const args = plainToClass(FoodItemFindManyArgs, request.query);
    return this.service.foodItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        expiryDate: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FoodItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async foodItem(
    @common.Param() params: FoodItemWhereUniqueInput
  ): Promise<FoodItem | null> {
    const result = await this.service.foodItem({
      where: params,
      select: {
        createdAt: true,
        description: true,
        expiryDate: true,
        id: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FoodItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFoodItem(
    @common.Param() params: FoodItemWhereUniqueInput,
    @common.Body() data: FoodItemUpdateInput
  ): Promise<FoodItem | null> {
    try {
      return await this.service.updateFoodItem({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          expiryDate: true,
          id: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FoodItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFoodItem(
    @common.Param() params: FoodItemWhereUniqueInput
  ): Promise<FoodItem | null> {
    try {
      return await this.service.deleteFoodItem({
        where: params,
        select: {
          createdAt: true,
          description: true,
          expiryDate: true,
          id: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/requests")
  @ApiNestedQuery(RequestFindManyArgs)
  async findRequests(
    @common.Req() request: Request,
    @common.Param() params: FoodItemWhereUniqueInput
  ): Promise<Request[]> {
    const query = plainToClass(RequestFindManyArgs, request.query);
    const results = await this.service.findRequests(params.id, {
      ...query,
      select: {
        createdAt: true,

        foodItem: {
          select: {
            id: true,
          },
        },

        id: true,
        requestDate: true,
        requester: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requests")
  async connectRequests(
    @common.Param() params: FoodItemWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        connect: body,
      },
    };
    await this.service.updateFoodItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requests")
  async updateRequests(
    @common.Param() params: FoodItemWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        set: body,
      },
    };
    await this.service.updateFoodItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requests")
  async disconnectRequests(
    @common.Param() params: FoodItemWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        disconnect: body,
      },
    };
    await this.service.updateFoodItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
