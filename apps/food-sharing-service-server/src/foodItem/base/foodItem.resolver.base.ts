/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FoodItem } from "./FoodItem";
import { FoodItemCountArgs } from "./FoodItemCountArgs";
import { FoodItemFindManyArgs } from "./FoodItemFindManyArgs";
import { FoodItemFindUniqueArgs } from "./FoodItemFindUniqueArgs";
import { CreateFoodItemArgs } from "./CreateFoodItemArgs";
import { UpdateFoodItemArgs } from "./UpdateFoodItemArgs";
import { DeleteFoodItemArgs } from "./DeleteFoodItemArgs";
import { RequestFindManyArgs } from "../../request/base/RequestFindManyArgs";
import { Request } from "../../request/base/Request";
import { User } from "../../user/base/User";
import { FoodItemService } from "../foodItem.service";
@graphql.Resolver(() => FoodItem)
export class FoodItemResolverBase {
  constructor(protected readonly service: FoodItemService) {}

  async _foodItemsMeta(
    @graphql.Args() args: FoodItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FoodItem])
  async foodItems(
    @graphql.Args() args: FoodItemFindManyArgs
  ): Promise<FoodItem[]> {
    return this.service.foodItems(args);
  }

  @graphql.Query(() => FoodItem, { nullable: true })
  async foodItem(
    @graphql.Args() args: FoodItemFindUniqueArgs
  ): Promise<FoodItem | null> {
    const result = await this.service.foodItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FoodItem)
  async createFoodItem(
    @graphql.Args() args: CreateFoodItemArgs
  ): Promise<FoodItem> {
    return await this.service.createFoodItem({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FoodItem)
  async updateFoodItem(
    @graphql.Args() args: UpdateFoodItemArgs
  ): Promise<FoodItem | null> {
    try {
      return await this.service.updateFoodItem({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FoodItem)
  async deleteFoodItem(
    @graphql.Args() args: DeleteFoodItemArgs
  ): Promise<FoodItem | null> {
    try {
      return await this.service.deleteFoodItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Request], { name: "requests" })
  async findRequests(
    @graphql.Parent() parent: FoodItem,
    @graphql.Args() args: RequestFindManyArgs
  ): Promise<Request[]> {
    const results = await this.service.findRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: FoodItem): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
