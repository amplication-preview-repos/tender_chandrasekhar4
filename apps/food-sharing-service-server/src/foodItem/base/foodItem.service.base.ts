/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FoodItem as PrismaFoodItem,
  Request as PrismaRequest,
  User as PrismaUser,
} from "@prisma/client";

export class FoodItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FoodItemCountArgs, "select">): Promise<number> {
    return this.prisma.foodItem.count(args);
  }

  async foodItems(
    args: Prisma.FoodItemFindManyArgs
  ): Promise<PrismaFoodItem[]> {
    return this.prisma.foodItem.findMany(args);
  }
  async foodItem(
    args: Prisma.FoodItemFindUniqueArgs
  ): Promise<PrismaFoodItem | null> {
    return this.prisma.foodItem.findUnique(args);
  }
  async createFoodItem(
    args: Prisma.FoodItemCreateArgs
  ): Promise<PrismaFoodItem> {
    return this.prisma.foodItem.create(args);
  }
  async updateFoodItem(
    args: Prisma.FoodItemUpdateArgs
  ): Promise<PrismaFoodItem> {
    return this.prisma.foodItem.update(args);
  }
  async deleteFoodItem(
    args: Prisma.FoodItemDeleteArgs
  ): Promise<PrismaFoodItem> {
    return this.prisma.foodItem.delete(args);
  }

  async findRequests(
    parentId: string,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.foodItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.foodItem
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
