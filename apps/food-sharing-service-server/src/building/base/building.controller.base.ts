/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BuildingService } from "../building.service";
import { BuildingCreateInput } from "./BuildingCreateInput";
import { Building } from "./Building";
import { Request } from "../../request/base/Request";
import { BuildingFindManyArgs } from "./BuildingFindManyArgs";
import { BuildingWhereUniqueInput } from "./BuildingWhereUniqueInput";
import { BuildingUpdateInput } from "./BuildingUpdateInput";

export class BuildingControllerBase {
  constructor(protected readonly service: BuildingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Building })
  async createBuilding(
    @common.Body() data: BuildingCreateInput
  ): Promise<Building> {
    return await this.service.createBuilding({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Building] })
  @ApiNestedQuery(BuildingFindManyArgs)
  async buildings(@common.Req() request: Request): Promise<Building[]> {
    const args = plainToClass(BuildingFindManyArgs, request.query);
    return this.service.buildings({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Building })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async building(
    @common.Param() params: BuildingWhereUniqueInput
  ): Promise<Building | null> {
    const result = await this.service.building({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Building })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBuilding(
    @common.Param() params: BuildingWhereUniqueInput,
    @common.Body() data: BuildingUpdateInput
  ): Promise<Building | null> {
    try {
      return await this.service.updateBuilding({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Building })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBuilding(
    @common.Param() params: BuildingWhereUniqueInput
  ): Promise<Building | null> {
    try {
      return await this.service.deleteBuilding({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
